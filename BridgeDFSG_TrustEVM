/*
BridgeDFSG_TrustEVM Smart Contract

Used to convert DFSG in BNB Chain to DFSG in TrustEVM Chain.

This contract is not deployed and must be updated before its deployment. 
It requires the token address of $DFSG in TrustEVM Chain.

bDFS = DFSG in BNB Chain
DFSG = DFSG in TrustEVM CHain

There is a 5% bonus for those brinding in a early phase.

*/

pragma solidity >=0.8.0;

// SPDX-License-Identifier: BSD-3-Clause

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

library EnumerableSet {

    struct Set {
        // Storage of set values
        bytes32[] _values;

        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping (bytes32 => uint256) _indexes;
    }

    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { // Equivalent to contains(set, value)
            
            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            bytes32 lastvalue = set._values[lastIndex];

            set._values[toDeleteIndex] = lastvalue;
            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based

            set._values.pop();

            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner,  bytes32(uint(uint160(value))));
    }

    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner,  bytes32(uint(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner,  bytes32(uint(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint(_at(set._inner, index))));
    }


    // UintSet

    struct UintSet {
        Set _inner;
    }

    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}

contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  constructor()  {
    owner = msg.sender;
  }


  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) onlyOwner public returns(bool){
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
    return true;
  }
  
}

interface Token {
    // bDFS functions
    function transferFrom(address, address, uint) external returns (bool);
    function transfer(address, uint) external returns (bool);
    function balanceOf(address) external returns (uint256);
    
}

contract BridgeDFSG_TrustEVM is Ownable {
    using SafeMath for uint;
    using EnumerableSet for EnumerableSet.AddressSet;
    
    /* @dev
    Contract addresses
    */
    address public constant bDFS = 0x75de745a333a47Fe786e8DbBf3E9440d3d5Bc809;
    address public constant DFSG = 0x612C49b95c9121107BE3A2FE1fcF1eFC1C4730AD;
    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;
    
    /* @dev
    DFS Supply = 1000*bDFS Supply 
    */
    uint public rate = 1050;
    
    event Bridged(address holder, uint amount, uint newAmount);
    
    /* @dev
    Globals
    */
    bool public enabled = false;
    uint public total_burned;
    uint public total_converted;
    
    EnumerableSet.AddressSet private allowed;
    mapping (address => uint) public amount_allowed;
    
    mapping (address => uint) public burned;
    mapping (address => uint) public converted;
    
    
    function changeState(bool _new) public onlyOwner returns(bool){
        enabled = _new;
        return true;
    }
    
    function allow(address _addr, uint _amo) public onlyOwner returns(bool){
        allowed.add(_addr);
        amount_allowed[_addr] = amount_allowed[_addr].add(_amo);
        return true;
    }
    
    function allowBatch(address[] calldata _addr, uint[] calldata _amo) public onlyOwner returns(bool){
        for(uint i = 0; i < _addr.length ; i = i.add(1)){
            allowed.add(_addr[i]);
            amount_allowed[_addr[i]] = amount_allowed[_addr[i]].add(_amo[i]);
        }
        
        return true;
    }
    
    function swap(uint amount) public returns (bool){
        require(enabled || (allowed.contains(msg.sender) && amount_allowed[msg.sender] >= amount) , "Bridge is disabled");
        if(!enabled){
            amount_allowed[msg.sender] = amount_allowed[msg.sender].sub(amount);
        }
        
        
        uint _toSend = amount.mul(rate);
        
        require(Token(bDFS).transferFrom(msg.sender, address(this), amount), "Could not get bDFS.");
        require(Token(bDFS).transfer(burnAddress, amount), "Could not burn bDFS.");
        require(Token(DFSG).transfer(msg.sender, _toSend), "Could not transfer DFS.");
        
        burned[msg.sender] = burned[msg.sender].add(amount);
        total_burned = total_burned.add(amount);
        converted[msg.sender] = converted[msg.sender].add(_toSend);
        total_converted = total_converted.add(_toSend);
        
        
        if(amount_allowed[msg.sender] == 0 && allowed.contains(msg.sender)){
            allowed.remove(msg.sender);
        }
       
        emit Bridged(msg.sender, amount, _toSend);
        return true;
    }
    
    function isAllowed(address _addr) public view returns (bool){
        return allowed.contains(_addr);
    }
    
    function update() public onlyOwner returns(bool){
        rate = 1000;
        return true;
    }
    
}
