/*
StakingDFSG_TrustEVM Smart Contract

This contract is not deployed and must be updated before its deployment. It requires the token address of $DFSG token in TrustEVM chain.

%APY = Current number of stakers
Min. amount to stake = 25,000 $DFSG
Lock period = 1 month
Claiming the rewards is available anytime.
*/

pragma solidity >=0.8.0;

// SPDX-License-Identifier: BSD-3-Clause

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

library EnumerableSet {

    struct Set {
        // Storage of set values
        bytes32[] _values;

        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping (bytes32 => uint256) _indexes;
    }

    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { // Equivalent to contains(set, value)
            
            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            bytes32 lastvalue = set._values[lastIndex];

            set._values[toDeleteIndex] = lastvalue;
            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based

            set._values.pop();

            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner,  bytes32(uint(uint160(value))));
    }

    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner,  bytes32(uint(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner,  bytes32(uint(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint(_at(set._inner, index))));
    }


    // UintSet

    struct UintSet {
        Set _inner;
    }

    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}

contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  constructor()  {
    owner = msg.sender;
  }


  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) onlyOwner public {
    require(newOwner != address(0));
    owner = newOwner;
    emit OwnershipTransferred(owner, newOwner);
  }
}

interface Token {
    // bDFS functions
    function transferFrom(address, address, uint) external returns (bool);
    function transfer(address, uint) external returns (bool);
    function balanceOf(address) external returns (uint);
}

contract StakingDFSG_TrustEVM is Ownable {
    using SafeMath for uint;
    using EnumerableSet for EnumerableSet.AddressSet;
    
    event Staked(address staker, uint amount);
    event Withdrawn(address staker, uint amount);
    event RewardsClaimed(address staker, uint amount);
    event RewardsRestaked(address staker, uint amount);

    /* @dev@
    Contracts addresses
    */
    address public constant DFSG = 0x612C49b95c9121107BE3A2FE1fcF1eFC1C4730AD; 
    
    uint public constant rewardInterval = 365 days;
    
    /* @dev@
    Staking fee = 1%
    */
    uint public constant stakingFeeRate = 100;
    
    /* @dev@
    Lock period = 1 month
    */
    uint public constant unstakeTime = 30 days;
    
    /* @dev@
    Total Allocation = 1000000 DFSG
    */
    uint public allocation = 1000000000000000000000000; 
    
    /* @dev@
    Min individual deposited = 25000 DFSG
    */
    uint public constant minStake = 25000000000000000000000;
    
    uint public totalClaimedRewards = 0;
    uint public totalDeposited = 0;
    uint public numStakers = 0;
    bool public ended = false;

    mapping (address => uint) public depositedTokens;
    mapping (address => uint) public stakingTime; 
    mapping (address => uint) public totalEarnedTokens;    
    
    function end() public onlyOwner returns (bool){
        require(!ended, "Staking already ended");
        ended = true;
        return true;
    }
    
    function getRewardsLeft() public view returns (uint){
       
        uint _res;
        if(ended){
            _res = 0;
        }else{
            _res = allocation.sub(totalClaimedRewards);
        }
        
        return _res;
    }
    
    function updateAccount(address account, bool _isStaking) internal {
        uint pendingDivs = getPendingDivs(account);
        if (pendingDivs > 0) {
            if(_isStaking){
                depositedTokens[account] = depositedTokens[account].add(pendingDivs);
                totalDeposited = totalDeposited.add(pendingDivs);
                emit RewardsRestaked(account, pendingDivs);
            }else{
                require(Token(DFSG).transfer(account, pendingDivs), "Could not transfer tokens.");
                emit RewardsClaimed(account, pendingDivs);
            }
            
            totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);
            totalClaimedRewards = totalClaimedRewards.add(pendingDivs);
            
        }
        stakingTime[account] = block.timestamp;
    }
    
    function getPendingDivs(address _staker) public view returns (uint) {
        if (depositedTokens[_staker] == 0) return 0;
        uint pendingDivs;
        if(!ended){
             uint timeDiff = block.timestamp.sub(stakingTime[_staker]);
             uint stakedAmount = depositedTokens[_staker];
             uint _apy = numStakers.mul(100);
        
             pendingDivs = stakedAmount
                                .mul(_apy) 
                                .mul(timeDiff)
                                .div(rewardInterval)
                                .div(1e4); 
            
        }else{
            pendingDivs = 0;
        }
       
        return pendingDivs;
    }

    function getCurrentAPY() public view returns (uint){
        return numStakers;
    }
    
    function deposit(uint amountToStake) public returns(bool){
        require(!ended, "Staking has ended");
        require(depositedTokens[msg.sender].add(amountToStake) >= minStake , "Deposit min");

        require(Token(DFSG).transferFrom(msg.sender, address(this), amountToStake), "Insufficient Token Allowance");
        
        if(depositedTokens[msg.sender] == 0) numStakers = numStakers.add(1);
        
        updateAccount(msg.sender, true);
        
        uint fee = amountToStake.mul(stakingFeeRate).div(1e4);
        uint amountAfterFee = amountToStake.sub(fee);
        require(Token(DFSG).transfer(owner, fee), "Could not transfer deposit fee.");
        
        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);
        totalDeposited = totalDeposited.add(amountAfterFee);
        stakingTime[msg.sender] = block.timestamp;

        emit Staked(msg.sender, amountAfterFee);
        return true;
    }
    
    function getUnlockTime(address _staker) public view returns(uint){
        uint _res = 0;
        if(!ended && stakingTime[_staker] != 0 && block.timestamp < stakingTime[_staker].add(unstakeTime)){
            _res = stakingTime[_staker].add(unstakeTime);
        }
        return _res;
    }
    
    function withdraw() public returns(bool){
        uint amount = depositedTokens[msg.sender];
        require(amount > 0, "Invalid amount to withdraw");

        if(!ended){
            require(block.timestamp.sub(stakingTime[msg.sender]) > unstakeTime, "You recently staked, please wait.");
            updateAccount(msg.sender, false);
        }
        
        depositedTokens[msg.sender] = 0;
        numStakers = numStakers.sub(1);
        totalDeposited = totalDeposited.sub(amount);
        require(Token(DFSG).transfer(msg.sender, amount), "Could not transfer tokens.");
        
        emit Withdrawn(msg.sender, amount);
        return true;
    }
      
    function claimDivs() public returns(bool){
        updateAccount(msg.sender, false);
        return true;
    }
    
    function transferAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner returns(bool){
        require (_tokenAddr != DFSG, "Cannot Transfer Out this token");
        Token(_tokenAddr).transfer(_to, _amount);
        return true;
    }
    
    /* @dev@
    Function to get the rewards left in the staking pool once ended
    */
    function transferRewardsLeft() public onlyOwner returns (bool){
        require(ended, "Not available.");
        
        uint contract_balance = Token(DFSG).balanceOf(address(this));
        require( contract_balance > totalDeposited, "Can't get users funds");
        uint _amount = contract_balance.sub(totalDeposited);
        Token(DFSG).transfer(owner, _amount);
        return true;
    }

    function setAllocation(uint _new) public onlyOwner returns(bool){
        allocation = _new;
        return true;
    }
    
    
    
}
